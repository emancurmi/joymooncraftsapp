{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport PriceSlider from \"./PriceSlider\";\nimport { Col, Collapse, Nav, Form, Label, Input, FormGroup, CustomInput } from \"reactstrap\";\n\nconst ShopSidebar = props => {\n  // FILTERS OBJECT IS ON THE BOTTOM OF THE PAGE\n  const [filterInputs, setFilterInputs] = React.useState({\n    // Remove or customize on PRODUCTION - Some brands are preselected\n    \"clothes-brand\": [\"brand0\", \"brand1\"],\n    // Remove or customize on PRODUCTION - Some sizes are preselected\n    size: [\"size1\"]\n  }); // Collapse state\n\n  const [collapse, setCollapse] = React.useState({});\n\n  const toggleCollapse = name => {\n    setCollapse(_objectSpread(_objectSpread({}, collapse), {}, {\n      [name]: !collapse[name]\n    }));\n  }; // On input change func\n\n\n  const onInputChange = e => {\n    const value = e.target.id; // Input value\n\n    const name = e.target.name; // Input name\n\n    filterInputs[name] // If input group exists\n    ? filterInputs[name].some(item => item === value) // If item exists in array > remove\n    ? setFilterInputs(_objectSpread(_objectSpread({}, filterInputs), {}, {\n      [name]: filterInputs[name].filter(x => x !== value)\n    })) : setFilterInputs(_objectSpread(_objectSpread({}, filterInputs), {}, {\n      [name]: [...filterInputs[name], value]\n    })) // If item doesn't exists in array > add it to input group\n    : setFilterInputs(_objectSpread(_objectSpread({}, filterInputs), {}, {\n      [name]: [value]\n    })); // If input group doesn't exists > create input group and add value\n  }; // On input radio change func\n\n\n  const onRadioChange = e => {\n    const value = e.target.id; // Input value\n\n    const name = e.target.name; // Input name\n    // Set active radio input\n\n    setFilterInputs(_objectSpread(_objectSpread({}, filterInputs), {}, {\n      [name]: value\n    }));\n  };\n\n  return __jsx(Col, {\n    lg: {\n      size: 4,\n      order: 1\n    },\n    xl: \"3\",\n    className: \"sidebar\"\n  }, filters.map((filter, index) => __jsx(\"div\", {\n    className: \"sidebar-block px-3 px-lg-0 mr-lg-4\",\n    key: index\n  }, __jsx(\"a\", {\n    className: \"d-lg-none block-toggler\",\n    \"aria-expanded\": collapse[filter.name],\n    onClick: () => toggleCollapse(filter.name)\n  }, filter.name), __jsx(Collapse, {\n    isOpen: collapse[filter.name],\n    className: \"expand-lg\"\n  }, filter.items && __jsx(Nav, {\n    pills: true,\n    className: \"flex-column mt-4 mt-lg-0\",\n    tag: \"div\"\n  }, filter.items.map(item => __jsx(React.Fragment, {\n    key: item.name\n  }, __jsx(\"a\", {\n    className: `nav-link d-flex justify-content-between mb-2 ${item.active ? \"active\" : \"\"}`,\n    href: \"#\"\n  }, __jsx(\"span\", null, item.name), __jsx(\"span\", {\n    className: \"sidebar-badge\"\n  }, item.count)), __jsx(Nav, {\n    pills: true,\n    className: \"flex-column ml-3\",\n    tag: \"div\"\n  }, item.items.map(subitem => __jsx(\"a\", {\n    className: \"nav-link mb-2\",\n    href: subitem.link,\n    key: subitem.name\n  }, subitem.name)))))), filter.component && __jsx(React.Fragment, null, __jsx(\"h6\", {\n    className: \"sidebar-heading d-none d-lg-block\"\n  }, filter.subtitle), __jsx(PriceSlider, null)), (filter.checkboxes || filter.radios || filter.colours) && __jsx(React.Fragment, null, __jsx(\"h6\", {\n    className: \"sidebar-heading d-none d-lg-block\"\n  }, filter.subtitle), __jsx(Form, {\n    className: \"mt-4 mt-lg-0\",\n    action: \"#\"\n  }, filter.checkboxes && // IF CHECKBOXES\n  filter.checkboxes.map((checkbox // LOOP THROUGH INPUTS\n  ) => __jsx(FormGroup, {\n    className: \"mb-1\",\n    key: checkbox.id\n  }, __jsx(CustomInput, {\n    type: \"checkbox\",\n    id: checkbox.id,\n    name: checkbox.name,\n    label: __jsx(React.Fragment, null, checkbox.label, \" \", __jsx(\"small\", null, \"(\", checkbox.count, \")\")) // CHECKED - CONTROLLED INPUT\n    ,\n    checked: filterInputs[checkbox.name] ? filterInputs[checkbox.name].includes(checkbox.id) : \"\",\n    onChange: e => onInputChange(e)\n  }))), filter.radios && // IF RADIOS\n  filter.radios.map((radio // LOOP THROUGH INPUTS\n  ) => __jsx(FormGroup, {\n    className: \"mb-1\",\n    key: radio.id\n  }, __jsx(CustomInput, {\n    type: \"radio\",\n    id: radio.id,\n    name: radio.name,\n    label: radio.label // CHECKED - CONTROLLED INPUT\n    ,\n    checked: filterInputs[radio.name] ? filterInputs[radio.name].includes(radio.id) : \"\",\n    onChange: e => onRadioChange(e)\n  }))), filter.colours && // IF COLOURS\n  __jsx(\"ul\", {\n    className: \"list-inline mb-0 colours-wrapper\"\n  }, filter.colours.map((colour // LOOP THROUGH INPUTS\n  ) => __jsx(\"li\", {\n    className: \"list-inline-item\",\n    key: colour.id\n  }, __jsx(Label, {\n    className: `btn-colour ${filterInputs[colour.name] && filterInputs[colour.name].some(item => item === colour.id) ? \"active\" : \"\"}`,\n    for: colour.id,\n    style: {\n      backgroundColor: colour.hex\n    }\n  }), __jsx(Input, {\n    className: \"input-invisible\",\n    type: \"checkbox\",\n    name: colour.name,\n    id: colour.id // CHECKED - CONTROLLED INPUT\n    ,\n    checked: filterInputs[colour.name] ? filterInputs[colour.name].includes(colour.id) : \"\",\n    onChange: e => onInputChange(e)\n  }))))))))));\n};\n\nexport default ShopSidebar;\nconst filters = [{\n  name: \"Product Categories\",\n  items: [{\n    name: \"Jackets\",\n    count: \"120\",\n    items: [{\n      name: \"Lorem ipsum\",\n      link: \"#\"\n    }, {\n      name: \"Dolor\",\n      link: \"#\"\n    }, {\n      name: \"Sit amet\",\n      link: \"#\"\n    }, {\n      name: \"Donec vitae\",\n      link: \"#\"\n    }]\n  }, {\n    name: \"Jeans & chinos\",\n    count: \"55\",\n    active: true,\n    items: [{\n      name: \"Lorem ipsum\",\n      link: \"#\"\n    }, {\n      name: \"Dolor\",\n      link: \"#\"\n    }, {\n      name: \"Sit amet\",\n      link: \"#\"\n    }, {\n      name: \"Donec vitae\",\n      link: \"#\"\n    }]\n  }, {\n    name: \"Accessories\",\n    count: \"80\",\n    items: [{\n      name: \"Sit amet\",\n      link: \"#\"\n    }, {\n      name: \"Donec vitae\",\n      link: \"#\"\n    }, {\n      name: \"Lorem ipsum\",\n      link: \"#\"\n    }, {\n      name: \"Dolor\",\n      link: \"#\"\n    }]\n  }]\n}, {\n  name: \"Filter by price\",\n  subtitle: \"Price\",\n  component: __jsx(PriceSlider, null)\n}, {\n  name: \"Filter by brand\",\n  subtitle: \"Brands\",\n  checkboxes: [{\n    name: \"clothes-brand\",\n    id: \"brand0\",\n    count: \"18\",\n    label: \"Calvin Klein\"\n  }, {\n    name: \"clothes-brand\",\n    id: \"brand1\",\n    count: \"30\",\n    label: \"Levi Strauss\"\n  }, {\n    name: \"clothes-brand\",\n    id: \"brand2\",\n    count: \"120\",\n    label: \"Hugo Boss\"\n  }, {\n    name: \"clothes-brand\",\n    id: \"brand3\",\n    count: \"70\",\n    label: \"Tomi Hilfiger\"\n  }, {\n    name: \"clothes-brand\",\n    id: \"brand4\",\n    count: \"110\",\n    label: \"Tom Ford\"\n  }]\n}, {\n  name: \"Filter by size\",\n  subtitle: \"Size\",\n  radios: [{\n    name: \"size\",\n    id: \"size0\",\n    label: \"Small\"\n  }, {\n    name: \"size\",\n    id: \"size1\",\n    label: \"Medium\"\n  }, {\n    name: \"size\",\n    id: \"size2\",\n    label: \"Large\"\n  }, {\n    name: \"size\",\n    id: \"size3\",\n    label: \"X-large\"\n  }]\n}, {\n  name: \"Filter by colour\",\n  subtitle: \"Colour\",\n  colours: [{\n    name: \"colour\",\n    id: \"colour_sidebar_Blue\",\n    hex: \"#668cb9\"\n  }, {\n    name: \"colour\",\n    id: \"colour_sidebar_White\",\n    hex: \"#fff\"\n  }, {\n    name: \"colour\",\n    id: \"colour_sidebar_Violet\",\n    hex: \"#8b6ea4\"\n  }, {\n    name: \"colour\",\n    id: \"colour_sidebar_Red\",\n    hex: \"#dd6265\"\n  }]\n}];","map":null,"metadata":{},"sourceType":"module"}