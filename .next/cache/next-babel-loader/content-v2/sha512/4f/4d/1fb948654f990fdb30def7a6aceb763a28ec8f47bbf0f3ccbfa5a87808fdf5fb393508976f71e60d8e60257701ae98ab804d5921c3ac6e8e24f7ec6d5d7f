{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState, useContext } from \"react\";\nimport Link from \"next/link\";\nimport { Row, Col, Form, FormGroup, Label, Input, Button, CustomInput, Collapse, Card, CardHeader, CardBody } from \"reactstrap\";\nimport { FormContext } from \"./FormContext\";\nimport Cart from \"./Cart\";\nimport data from \"../data/checkout.json\";\nimport productsCart from \"../data/products-cart.json\"; //import CartItems from './CartItems'\n\nconst FormCheckout = ({\n  step,\n  next,\n  prev\n}) => {\n  const {\n    0: formInputs,\n    1: setFormInputs\n  } = useContext(FormContext); // Checkout inputs context\n\n  const {\n    0: collapse,\n    1: setCollapse\n  } = useState(false);\n  const {\n    0: multiCollapse,\n    1: setMultiCollapse\n  } = useState(formInputs[\"Payment Method\"] ? Object.keys(formInputs[\"Payment Method\"])[0] : {}); // Set default first payment method\n\n  const toggleCollapse = (e, name) => {\n    setCollapse(!collapse);\n    setFormInputs(_objectSpread(_objectSpread({}, formInputs), {}, {\n      [e.target.name]: value\n    }));\n    const value = e.target.value; // Input value\n  };\n\n  const toggleMultiCollapse = (e, name) => {\n    // Set collapse by name\n    e.preventDefault();\n    setMultiCollapse(name);\n  };\n\n  const onChange = (e, groupName, tabName) => {\n    // On input change\n    const value = e.target.value; // Input value\n\n    groupName // If group value present set group value\n    ? formInputs[groupName] // If group input value present set update\n    ? setFormInputs(_objectSpread(_objectSpread({}, formInputs), {}, {\n      [groupName]: {\n        [tabName]: _objectSpread(_objectSpread({}, formInputs[groupName][tabName]), {}, {\n          [e.target.name]: value\n        })\n      }\n    })) : // else set values\n    setFormInputs(_objectSpread(_objectSpread({}, formInputs), {}, {\n      [groupName]: {\n        [tabName]: {\n          [e.target.name]: value\n        }\n      }\n    })) : // else set single input\n    setFormInputs(_objectSpread(_objectSpread({}, formInputs), {}, {\n      [e.target.name]: value\n    }));\n  };\n\n  const onRadioChange = (e, input, groupName, tabName) => {\n    // On radio input change\n    const value = e.target.id; // Input value\n\n    groupName // If group value present set group value\n    ? setFormInputs(_objectSpread(_objectSpread({}, formInputs), {}, {\n      [groupName]: {\n        [tabName]: [value, input.label]\n      }\n    })) : // else set single input\n    setFormInputs(_objectSpread(_objectSpread({}, formInputs), {}, {\n      [e.target.name]: [value, input.label, input.price]\n    }));\n  };\n\n  return __jsx(Form, null, data.map(block => {\n    return block.step === step ? // Checkout step check\n    __jsx(Collapse, {\n      key: block.name,\n      isOpen: block.collapse ? formInputs[\"show-shipping-address\"] : true\n    }, block.title && __jsx(\"h3\", {\n      className: block.titleclass\n    }, block.name), block.inputs && __jsx(Row, null, block.inputs.map((input, index) => __jsx(React.Fragment, {\n      key: index\n    }, input.type === \"text\" && __jsx(FormGroup, {\n      key: index,\n      className: \"col-md-6\"\n    }, __jsx(Label, {\n      className: \"form-label\",\n      for: input.name\n    }, input.label), __jsx(Input, {\n      type: input.type,\n      name: input.name,\n      placeholder: input.placeholder,\n      id: input.name,\n      value: formInputs[input.name] || \"\",\n      onChange: e => onChange(e)\n    })), input.toggleshipping && __jsx(FormGroup, {\n      key: index,\n      className: \"col-12 mt-3\"\n    }, __jsx(\"div\", {\n      className: \"custom-control custom-checkbox\"\n    }, __jsx(\"input\", {\n      className: \"custom-control-input\",\n      onChange: e => setFormInputs(_objectSpread(_objectSpread({}, formInputs), {}, {\n        [e.target.name]: collapse\n      })),\n      id: input.name,\n      type: input.type,\n      name: input.name,\n      checked: formInputs[input.name] || \"\"\n    }), __jsx(\"label\", {\n      onClick: () => setCollapse(!collapse),\n      className: \"custom-control-label align-middle\",\n      htmlFor: input.name\n    }, input.label))), input.type === \"radio\" && __jsx(Col, {\n      md: \"6\",\n      key: index\n    }, __jsx(\"div\", {\n      className: \"card-radio mb-4\"\n    }, __jsx(\"label\", {\n      className: \"card-label\",\n      htmlFor: input.id\n    }), __jsx(\"input\", {\n      className: \"card-radio-input\",\n      type: input.type,\n      name: input.name,\n      id: input.id,\n      onChange: e => onRadioChange(e, input) // On change func\n      ,\n      checked: formInputs[input.name] ? formInputs[input.name][0] === input.id : index === 0 // Checked input control, if first input checked by default\n\n    }), __jsx(Card, null, __jsx(CardHeader, null, __jsx(\"h6\", {\n      className: \"mb-0 text-uppercase\"\n    }, input.label)), __jsx(CardBody, null, input.price && __jsx(\"h6\", {\n      className: \"mb-3\"\n    }, \"$\", input.price.toFixed(2)), __jsx(\"p\", {\n      className: \"text-muted text-sm card-text\"\n    }, input.text)))))))), block.reviewtable && __jsx(\"div\", {\n      className: \"mb-5\"\n    }, __jsx(Cart, {\n      review: true\n    })), block.tabs && __jsx(\"div\", {\n      className: \"mb-5\"\n    }, block.tabs.map(tab => {\n      const isCollapse = Object.keys(multiCollapse).length === 0 ? tab.default : multiCollapse === tab.name;\n      return __jsx(\"div\", {\n        key: tab.name,\n        className: \"block mb-3\"\n      }, __jsx(\"div\", {\n        className: \"block-header\"\n      }, __jsx(\"a\", {\n        href: \"#\",\n        className: `accordion-link font-weight-bold ${!isCollapse ? \"collapsed\" : \"\"}`,\n        onClick: e => toggleMultiCollapse(e, tab.name),\n        \"aria-expanded\": isCollapse\n      }, tab.name)), __jsx(Collapse, {\n        isOpen: isCollapse\n      }, __jsx(\"div\", {\n        className: \"block-body\"\n      }, __jsx(Row, null, tab.inputs.map(input => input.type === \"radio\" ? __jsx(Col, {\n        key: input.name\n      }, __jsx(CustomInput, {\n        type: input.type,\n        id: input.id,\n        name: input.name,\n        label: __jsx(React.Fragment, null, __jsx(\"span\", {\n          className: \"d-block h6 mt-1 mb-3\"\n        }, input.label), __jsx(\"span\", {\n          className: \"text-muted text-sm\"\n        }, input.text)),\n        onChange: e => onRadioChange(e, input, block.name, tab.name) // On change func\n        ,\n        checked: formInputs[block.name] && formInputs[block.name][tab.name] && formInputs[block.name][tab.name][0] === input.id || false // Checked input control\n\n      })) : __jsx(FormGroup, {\n        key: input.name,\n        className: `col-md-${input.col ? input.col : 6}`\n      }, __jsx(Label, {\n        className: \"form-label\",\n        for: input.name\n      }, input.label), __jsx(Input, {\n        type: input.type,\n        name: input.name,\n        placeholder: input.placeholder,\n        value: formInputs[block.name] && formInputs[block.name][tab.name] && formInputs[block.name][tab.name][input.name] || \"\" // Checked input control\n        ,\n        onChange: e => onChange(e, block.name, tab.name) // On change func\n\n      })))))));\n    }))) : \"\";\n  }), __jsx(\"div\", {\n    className: \"my-5 d-flex justify-content-between flex-column flex-lg-row\"\n  }, __jsx(Link, {\n    href: prev[1],\n    passHref: true\n  }, __jsx(Button, {\n    color: \"link\",\n    className: \"text-muted\"\n  }, __jsx(\"i\", {\n    className: \"fa fa-angle-left mr-2\"\n  }), prev[0])), __jsx(Link, {\n    href: next[1],\n    passHref: true\n  }, __jsx(Button, {\n    color: \"dark\"\n  }, next[0], __jsx(\"i\", {\n    className: \"fa fa-angle-right ml-2\"\n  })))));\n};\n\nexport default FormCheckout;","map":null,"metadata":{},"sourceType":"module"}