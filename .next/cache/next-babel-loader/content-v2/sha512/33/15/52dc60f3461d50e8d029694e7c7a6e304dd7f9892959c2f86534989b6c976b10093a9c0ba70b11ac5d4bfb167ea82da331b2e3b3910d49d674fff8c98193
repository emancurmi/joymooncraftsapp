{"ast":null,"code":"var __jsx = React.createElement;\nimport React from \"react\";\nimport { Container, Row, Col } from \"reactstrap\";\nimport DocsNav from \"../../components/Docs/DocsNav\";\nimport Breadcrumbs from \"../../components/Breadcrumbs\";\n\nvar DirectoryStructure = function DirectoryStructure() {\n  return __jsx(React.Fragment, null, __jsx(\"section\", {\n    className: \"hero\"\n  }, __jsx(Container, null, __jsx(Breadcrumbs, {\n    links: [{\n      name: \"Home\",\n      link: \"/\"\n    }, {\n      name: \"Documentation\",\n      link: \"/docs/introduction\"\n    }, {\n      name: \"Directory structure\",\n      active: true\n    }],\n    className: \"justify-content-center\"\n  }), __jsx(\"div\", {\n    className: \"hero-content pb-5 text-center\"\n  }, __jsx(\"h1\", {\n    className: \"hero-heading\"\n  }, \"Directory structure\")))), __jsx(Container, {\n    fluid: true\n  }, __jsx(Row, {\n    className: \"px-xl-5\"\n  }, __jsx(Col, {\n    lg: \"2\"\n  }, __jsx(DocsNav, null)), __jsx(Col, {\n    lg: \"10\",\n    xl: \"8\",\n    className: \"docs-content text-lg\"\n  }, __jsx(\"div\", {\n    id: \"pagesfolder\",\n    className: \"docs-item\"\n  }, __jsx(\"h5\", {\n    className: \"text-uppercase mb-4\"\n  }, \"Src folder\"), __jsx(\"div\", {\n    className: \"docs-desc\"\n  }), __jsx(\"div\", {\n    className: \"mt-5\"\n  }, __jsx(\"p\", null, \"All the theme files are located in \", __jsx(\"code\", null, \"/src\"), \" folder. Files here form a demo static site, mostly equivalent to the online demo (CDNs not used here).\"), __jsx(\"p\", null, \"Next.js uses folder and file name based routing. If you place file named \", __jsx(\"code\", null, \"about.js\"), \" to \", __jsx(\"code\", null, \"/src/pages\"), \" \", \"folder, page with \", __jsx(\"code\", null, \"/about\"), \" URL will be created. You can also use subfolders (for example\", \" \", __jsx(\"code\", null, \"/src/pages/blog/post.js\"), \" - final URL\", \" \", __jsx(\"code\", null, \"/blog/post\"), \").\"), __jsx(\"p\", null, \" \", \"You can open any of the files in your code editor to modiy their markup or content to suit your needs.\"), __jsx(\"p\", null, __jsx(\"strong\", null, \"Src folder also includes these subfolders:\")), __jsx(\"ul\", null, __jsx(\"li\", null, __jsx(\"code\", null, \"/scss\"), \" - where you can find all scss files\"), __jsx(\"li\", null, __jsx(\"code\", null, \"/components\"), \" - React components\"), __jsx(\"li\", null, __jsx(\"code\", null, \"/hooks\"), \" - custom reusable React hooks\"), __jsx(\"li\", null, __jsx(\"code\", null, \"/pages\"), \" - files for every page\"), __jsx(\"li\", null, __jsx(\"code\", null, \"/data\"), \" - JSON data sample files for pages and components\")))), __jsx(\"div\", {\n    id: \"scssfolder\",\n    className: \"docs-item\"\n  }, __jsx(\"h5\", {\n    className: \"text-uppercase mb-4\"\n  }, \"SCSS folder\"), __jsx(\"div\", {\n    className: \"docs-desc\"\n  }), __jsx(\"div\", {\n    className: \"mt-5\"\n  }, __jsx(\"p\", null, \" \", \"SCSS folder located at \", __jsx(\"code\", null, \"/src/scss\"), \", contains Bootstrap\\u2019s and theme\\u2019s SCSS sources structured in the following subfolders\"), __jsx(\"ul\", null, __jsx(\"li\", null, __jsx(\"code\", null, \"bootstrap\"), \" - full SCSS source for the Bootstrap framework.\"), __jsx(\"li\", null, __jsx(\"code\", null, \"modules\"), \" - theme overrides and custom components for this theme\"), __jsx(\"li\", null, __jsx(\"code\", null, \"style.*.scss\"), \" - main theme SCSS files that get compiled into theme main stylesheets style.*.css. The * represents the colour variant\"), __jsx(\"li\", null, __jsx(\"code\", null, \"core.scss\"), \" - file that handles all the SASS imports - mixins, Bootstrap and theme variables, Bootstrap framework\"), __jsx(\"li\", null, __jsx(\"code\", null, \"user.scss\"), \" - a place for you to add your own custom CSS declarations to keep them separate from the core theme files, which aids updating.\"), __jsx(\"li\", null, __jsx(\"code\", null, \"user-variables.scss\"), \" - a place for you to add your own custom SCSS variables to override the Bootstrap and theme defaults. This prevents the need to edit the core Bootstrap/theme files and prevents the problems from updating the theme.\")))), __jsx(\"div\", {\n    id: \"publicfolder\",\n    className: \"docs-item\"\n  }, __jsx(\"h5\", {\n    className: \"text-uppercase mb-4\"\n  }, \"Public folder\"), __jsx(\"div\", {\n    className: \"docs-desc\"\n  }), __jsx(\"div\", {\n    className: \"mt-5\"\n  }, __jsx(\"p\", null, \"Static files like images or SVG files are located in\", \" \", __jsx(\"code\", null, \"/public/content\"), \" folder.\"), __jsx(\"p\", null, \"You can customize \", __jsx(\"code\", null, \"favicon\"), \" in \", __jsx(\"code\", null, \"/public\"), \" \", \"folder too.\")))))));\n};\n\nexport var __N_SSG = true;\nexport default DirectoryStructure;","map":null,"metadata":{},"sourceType":"module"}