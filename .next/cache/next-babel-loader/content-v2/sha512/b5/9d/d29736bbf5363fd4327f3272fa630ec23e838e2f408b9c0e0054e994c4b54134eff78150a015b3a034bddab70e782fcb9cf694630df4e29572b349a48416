{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState, useEffect, useRef } from \"react\";\nimport Link from \"next/link\";\nimport Router from \"next/router\";\nimport { Collapse, Navbar, NavbarToggler, Nav, NavItem, NavLink, Dropdown, DropdownToggle, DropdownMenu, DropdownItem, Container, Row, Col, Badge } from \"reactstrap\";\nimport UseWindowSize from \"../hooks/UseWindowSize\";\nimport useScrollPosition from \"@react-hook/window-scroll\";\nimport useSize from \"@react-hook/size\";\nimport Logo from \"../../public/svg/logo.svg\";\nimport ActiveLink from \"./ActiveLink\";\nimport CartOverviewDropdown from \"./CartOverviewDropdown\";\nimport menu from \"../data/menu.json\";\nimport userMenu from \"../data/user-menu.json\";\n\nconst Header = props => {\n  const {\n    0: collapsed,\n    1: setCollapsed\n  } = useState(false);\n  const {\n    0: dropdownOpen,\n    1: setDropdownOpen\n  } = useState({});\n  const {\n    0: searchToggle,\n    1: setSearchToggle\n  } = useState(false);\n  const {\n    0: searchFocus,\n    1: setSearchFocus\n  } = useState(false);\n  const {\n    0: parentName,\n    1: setParentName\n  } = useState(false);\n  const {\n    0: additionalNavClasses,\n    1: setAdditionalNavClasses\n  } = useState(\"\");\n  const size = UseWindowSize();\n  const scrollY = useScrollPosition();\n  const navbarRef = useRef(null);\n  const topbarRef = useRef(null);\n  const [topbarWidth, topbarHeight] = useSize(topbarRef);\n  const [navbarWidth, navbarHeight] = useSize(navbarRef);\n\n  const onFocus = () => setSearchFocus(!searchFocus);\n\n  const toggleDropdown = name => {\n    setDropdownOpen(_objectSpread(_objectSpread({}, dropdownOpen), {}, {\n      [name]: !dropdownOpen[name]\n    }));\n  };\n\n  const onLinkClick = parent => {\n    size.width < 991 && setCollapsed(!collapsed);\n    setParentName(parent);\n  };\n\n  const makeNavbarSticky = () => {\n    if (props.nav.sticky !== false) {\n      if (scrollY > topbarHeight) {\n        setAdditionalNavClasses(\"fixed-top\");\n        navbarHeight > 0 && props.headerAbsolute !== true && props.setPaddingTop(navbarHeight);\n      } else {\n        setAdditionalNavClasses(\"\");\n        props.setPaddingTop(0);\n      }\n    } else {\n      setAdditionalNavClasses(\"\");\n      props.setPaddingTop(0);\n    }\n  };\n\n  useEffect(() => {\n    makeNavbarSticky();\n  }, [scrollY, topbarHeight]); // highlight not only active dropdown item, but also its parent, i.e. dropdown toggle\n\n  const highlightDropdownParent = () => {\n    menu.map(item => {\n      item.dropdown && item.dropdown.map(dropdownLink => {\n        dropdownLink.link && dropdownLink.link === Router.route && setParentName(item.title);\n        dropdownLink.links && dropdownLink.links.map(link => link.link === Router.route && setParentName(item.title));\n      });\n      item.megamenu && item.megamenu.map(megamenuColumn => megamenuColumn.map(megamenuBlock => megamenuBlock.links.map(dropdownLink => {\n        if (dropdownLink.link === Router.route) {\n          dropdownLink.parent ? setParentName(dropdownLink.parent) : setParentName(item.title);\n        }\n      })));\n      item.link === Router.route && setParentName(item.title);\n    });\n  };\n\n  useEffect(highlightDropdownParent, []);\n  return __jsx(\"header\", {\n    className: `header ${props.headerClasses ? props.headerClasses : \"\"} ${props.headerAbsolute ? \"header-absolute\" : \"\"}`\n  }, !props.hideTopbar && __jsx(\"div\", {\n    className: \"top-bar\",\n    ref: topbarRef\n  }, __jsx(Container, {\n    fluid: true\n  }, __jsx(Row, {\n    className: \"d-flex align-items-center\"\n  }, __jsx(Col, {\n    sm: \"7\",\n    className: \"d-none d-sm-block\"\n  }, __jsx(\"ul\", {\n    className: \"list-inline mb-0\"\n  }, __jsx(\"li\", {\n    className: \"list-inline-item pr-3 mr-0\"\n  }, __jsx(\"svg\", {\n    className: \"svg-icon mr-2\"\n  }, __jsx(\"use\", {\n    xlinkHref: \"/icons/orion-svg-sprite.svg#calls-1\"\n  })), \"020-800-456-747\"), __jsx(\"li\", {\n    className: \"list-inline-item px-3 border-left d-none d-lg-inline-block\"\n  }, \"Free shipping on orders over $300\"))), __jsx(Col, {\n    sm: \"5\",\n    className: \"d-flex justify-content-end\"\n  }, __jsx(Dropdown, {\n    className: \"border-right px-3\",\n    key: \"language_dropdown\",\n    isOpen: dropdownOpen[\"language_dropdown\"],\n    toggle: () => toggleDropdown(\"language_dropdown\")\n  }, __jsx(DropdownToggle, {\n    caret: true,\n    tag: \"a\",\n    href: \"#\",\n    className: \"topbar-link\",\n    id: \"langsDropdown\"\n  }, __jsx(\"img\", {\n    className: \"topbar-flag\",\n    src: \"/svg/united-kingdom.svg\",\n    alt: \"english\"\n  }), \"English\"), __jsx(DropdownMenu, {\n    right: true,\n    \"aria-labelledby\": \"langsDropdown\"\n  }, __jsx(DropdownItem, {\n    className: \"text-sm\"\n  }, __jsx(\"img\", {\n    className: \"topbar-flag\",\n    src: \"/svg/germany.svg\",\n    alt: \"german\"\n  }), \"German\"), __jsx(DropdownItem, {\n    className: \"text-sm\"\n  }, __jsx(\"img\", {\n    className: \"topbar-flag\",\n    src: \"/svg/france.svg\",\n    alt: \"french\"\n  }), \"French\"))), __jsx(Dropdown, {\n    className: \"pl-3 ml-0\",\n    key: \"currency_dropdown\",\n    isOpen: dropdownOpen[\"currency_dropdown\"],\n    toggle: () => toggleDropdown(\"currency_dropdown\")\n  }, __jsx(DropdownToggle, {\n    caret: true,\n    tag: \"a\",\n    href: \"#\",\n    className: \"topbar-link\",\n    id: \"currencyDropdown\"\n  }, \"USD\"), __jsx(DropdownMenu, {\n    right: true,\n    \"aria-labelledby\": \"currencyDropdown\"\n  }, __jsx(DropdownItem, {\n    className: \"text-sm\"\n  }, \"EUR\"), __jsx(DropdownItem, {\n    className: \"text-sm\"\n  }, \"GBP\"))))))), __jsx(\"div\", {\n    ref: navbarRef\n  }, __jsx(Navbar, {\n    color: props.nav.color ? Object.values(dropdownOpen).some(dropdown => dropdown) || collapsed ? \"white\" : props.nav.color : \"white\",\n    light: props.nav.light || Object.values(dropdownOpen).some(dropdown => dropdown) || collapsed,\n    dark: props.nav.dark && !Object.values(dropdownOpen).some(dropdown => dropdown) && !collapsed,\n    fixed: props.nav.fixed ? props.nav.fixed : \"\",\n    expand: \"lg\",\n    className: ` ${props.nav.classes ? props.nav.classes : \"navbar-sticky bg-fixed-white\"} ${additionalNavClasses ? additionalNavClasses : \"\"}`\n  }, __jsx(Container, {\n    fluid: true\n  }, __jsx(Link, {\n    href: \"/\",\n    passHref: true\n  }, __jsx(\"a\", {\n    className: \"py-1 navbar-brand\"\n  }, __jsx(Logo, null))), __jsx(NavbarToggler, {\n    onClick: () => setCollapsed(!collapsed),\n    className: \"navbar-toggler-right\"\n  }, __jsx(\"i\", {\n    className: \"fa fa-bars\"\n  })), __jsx(Collapse, {\n    isOpen: collapsed,\n    navbar: true\n  }, __jsx(Nav, {\n    navbar: true,\n    className: \"mx-auto\"\n  }, menu && menu.map(item => item.dropdown || item.megamenu ? // show entire menu to unlogged user or hide items that have hideToLoggedUser set to true\n  !props.loggedUser || props.loggedUser && !item.hideToLoggedUser ? __jsx(Dropdown, {\n    nav: true,\n    inNavbar: true,\n    key: item.title,\n    className: item.position ? `position-${item.position}` : ``,\n    isOpen: dropdownOpen[item.title],\n    toggle: () => toggleDropdown(item.title)\n  }, __jsx(DropdownToggle, {\n    nav: true,\n    caret: true,\n    className: parentName === item.title ? \"active\" : \"\"\n  }, item.title), __jsx(DropdownMenu, {\n    className: ` ${item.megamenu ? \"megamenu py-lg-0\" : \"\"}`\n  }, item.dropdown && item.dropdown.map(dropdownItem => dropdownItem.links ? __jsx(React.Fragment, {\n    key: dropdownItem.title\n  }, dropdownItem.divider && __jsx(DropdownItem, {\n    divider: true\n  }), __jsx(\"h6\", {\n    className: \"dropdown-header font-weight-normal\"\n  }, dropdownItem.title), dropdownItem.links.map(link => __jsx(ActiveLink, {\n    key: link.title,\n    activeClassName: \"active\",\n    href: link.link,\n    passHref: true\n  }, __jsx(DropdownItem, {\n    onClick: () => onLinkClick(item.title)\n  }, link.title, link.new && __jsx(Badge, {\n    color: \"warning\",\n    className: \"ml-1 mt-n1\"\n  }, \"New\"))))) : __jsx(ActiveLink, {\n    key: dropdownItem.title,\n    activeClassName: \"active\",\n    href: dropdownItem.link,\n    passHref: true\n  }, __jsx(DropdownItem, {\n    onClick: () => onLinkClick(item.title)\n  }, dropdownItem.title, dropdownItem.new && __jsx(Badge, {\n    color: \"warning\",\n    className: \"ml-1 mt-n1\"\n  }, \"New\")))), item.megamenu && __jsx(Row, null, __jsx(Col, {\n    lg: \"9\"\n  }, __jsx(Row, {\n    className: \"p-3 pr-lg-0 pl-lg-5 pt-lg-5\"\n  }, item.megamenu.map((megamenuItem, index) => __jsx(Col, {\n    key: index,\n    lg: \"3\"\n  }, megamenuItem.map((block, index) => __jsx(React.Fragment, {\n    key: index\n  }, __jsx(\"h6\", {\n    className: \"text-uppercase\"\n  }, block.title), __jsx(\"ul\", {\n    className: \"megamenu-list list-unstyled\"\n  }, block.links.map((link, index) => __jsx(\"li\", {\n    key: index,\n    className: \"megamenu-list-item\"\n  }, __jsx(ActiveLink, {\n    activeClassName: \"active\",\n    href: link.link,\n    as: link.as,\n    passHref: true\n  }, __jsx(DropdownItem, {\n    className: \"megamenu-list-link\",\n    onClick: () => link.parent ? onLinkClick(link.parent) : onLinkClick(item.title)\n  }, link.title, link.new && __jsx(Badge, {\n    color: \"warning\",\n    className: \"ml-1 mt-n1\"\n  }, \"New\"))))))))))), item.services && __jsx(Row, {\n    className: \"megamenu-services d-none d-lg-flex pl-lg-5\"\n  }, item.services.map(service => __jsx(Col, {\n    key: service.title,\n    xl: \"3\",\n    lg: \"6\",\n    className: \"d-flex\"\n  }, __jsx(\"div\", {\n    className: \"megamenu-services-item\"\n  }, __jsx(\"svg\", {\n    className: \"svg-icon megamenu-services-icon\"\n  }, __jsx(\"use\", {\n    xlinkHref: service.icon\n  })), __jsx(\"div\", null, __jsx(\"h6\", {\n    className: \"text-uppercase\"\n  }, service.title), __jsx(\"p\", {\n    className: \"mb-0 text-muted text-sm\"\n  }, service.content))))))), item.image && __jsx(Col, {\n    lg: \"3\",\n    className: \"d-none d-lg-block\"\n  }, __jsx(\"img\", {\n    src: item.image,\n    alt: \"\",\n    className: \"bg-image\"\n  }))))) : \"\" : props.loggedUser && !item.hideToLoggedUser || !props.loggedUser ? __jsx(NavItem, {\n    key: item.title,\n    className: item.button ? \"mt-3 mt-lg-0 ml-lg-3 d-lg-none d-xl-inline-block\" : \"\"\n  }, item.button ? item.showToLoggedUser !== false && __jsx(ActiveLink, {\n    activeClassName: \"active\",\n    href: item.link\n  }, __jsx(\"a\", {\n    className: \"btn btn-primary\",\n    onClick: () => onLinkClick(item.title)\n  }, item.title)) : __jsx(ActiveLink, {\n    activeClassName: \"active\",\n    href: item.link,\n    passHref: true\n  }, __jsx(NavLink, {\n    onClick: () => onLinkClick(item.title)\n  }, item.title))) : \"\")), __jsx(\"div\", {\n    className: \"d-flex align-items-center justify-content-between justify-content-lg-end mt-1 mb-2 my-lg-0\"\n  }, __jsx(\"div\", {\n    className: \"nav-item navbar-icon-link\",\n    \"data-toggle\": \"search\",\n    onClick: () => setSearchToggle(!searchToggle)\n  }, __jsx(\"svg\", {\n    className: \"svg-icon\"\n  }, __jsx(\"use\", {\n    xlinkHref: \"/icons/orion-svg-sprite.svg#search-1\"\n  }))), props.loggedUser ? userMenu.map(item => __jsx(Dropdown, {\n    nav: true,\n    inNavbar: true,\n    key: item.title,\n    tag: \"div\",\n    className: item.type === \"avatar\" ? \"navbar-icon-link mt-n1 py-0\" : \"\",\n    isOpen: dropdownOpen[item.title],\n    toggle: () => toggleDropdown(item.title)\n  }, __jsx(DropdownToggle, {\n    nav: true,\n    style: item.type === \"avatar\" && {\n      padding: 0\n    }\n  }, item.type === \"avatar\" ? __jsx(\"img\", {\n    src: item.img,\n    alt: item.title,\n    className: \"avatar avatar-sm avatar-border-white\"\n  }) : item.title), __jsx(DropdownMenu, {\n    right: true\n  }, item.dropdown && item.dropdown.map((dropdownItem, dropdownIndex) => dropdownItem.divider ? __jsx(DropdownItem, {\n    key: dropdownIndex,\n    divider: true\n  }) : __jsx(ActiveLink, {\n    key: dropdownIndex,\n    activeClassName: \"active\",\n    href: dropdownItem.link,\n    passHref: true\n  }, __jsx(DropdownItem, {\n    onClick: () => onLinkClick(item.title)\n  }, dropdownItem.title)))))) : __jsx(\"div\", {\n    className: \"nav-item\"\n  }, __jsx(Link, {\n    href: \"/customer-login\"\n  }, __jsx(\"a\", {\n    className: \"navbar-icon-link\"\n  }, __jsx(\"svg\", {\n    className: \"svg-icon\"\n  }, __jsx(\"use\", {\n    xlinkHref: \"/icons/orion-svg-sprite.svg#male-user-1\"\n  })), __jsx(\"span\", {\n    className: \"text-sm ml-2 ml-lg-0 text-uppercase text-sm font-weight-bold d-none d-sm-inline d-lg-none\"\n  }, \"Log in\")))), __jsx(CartOverviewDropdown, null)))))), searchToggle && __jsx(\"div\", {\n    className: \"search-area-wrapper\",\n    style: {\n      display: \"block\"\n    }\n  }, __jsx(\"div\", {\n    className: \"search-area d-flex align-items-center justify-content-center\"\n  }, __jsx(\"div\", {\n    className: \"close-btn\",\n    onClick: () => setSearchToggle(!searchToggle)\n  }, __jsx(\"svg\", {\n    className: \"svg-icon svg-icon-light w-3rem h-3rem\"\n  }, __jsx(\"use\", {\n    xlinkHref: \"/icons/orion-svg-sprite.svg#close-1\"\n  }, \" \"))), __jsx(\"form\", {\n    className: \"search-area-form\",\n    action: \"#\"\n  }, __jsx(\"div\", {\n    className: \"form-group position-relative\"\n  }, __jsx(\"input\", {\n    className: \"search-area-input\",\n    type: \"search\",\n    name: \"search\",\n    id: \"search\",\n    autoFocus: true,\n    placeholder: \"What are you looking for?\"\n  }), __jsx(\"button\", {\n    className: \"search-area-button\",\n    type: \"submit\"\n  }, __jsx(\"svg\", {\n    className: \"svg-icon\"\n  }, __jsx(\"use\", {\n    xlinkHref: \"/icons/orion-svg-sprite.svg#search-1\"\n  }))))))));\n};\n\nexport default Header;","map":null,"metadata":{},"sourceType":"module"}