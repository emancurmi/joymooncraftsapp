{"ast":null,"code":"import _defineProperty from \"C:/Users/Eman/source/repos/emancurmi/joymooncraftsapp/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport ReactIdSwiper from \"react-id-swiper\";\nimport { Container, Row, Col, Button } from \"reactstrap\";\nexport default function Swiper(props) {\n  var breakpoints = [];\n\n  if (props.sm) {\n    breakpoints[565] = {\n      slidesPerView: props.sm\n    };\n  }\n\n  if (props.md) {\n    breakpoints[768] = {\n      slidesPerView: props.md\n    };\n  }\n\n  if (props.lg) {\n    breakpoints[991] = {\n      slidesPerView: props.lg\n    };\n  }\n\n  if (props.xl) {\n    breakpoints[1200] = {\n      slidesPerView: props.xl\n    };\n  }\n\n  if (props.xxl) {\n    breakpoints[1400] = {\n      slidesPerView: props.xxl\n    };\n  }\n\n  if (props.xxxl) {\n    breakpoints[1600] = {\n      slidesPerView: props.xxxl\n    };\n  }\n\n  var params = {\n    containerClass: \"swiper-container \".concat(props.className ? props.className : \"\"),\n    slidesPerView: props.slidesPerView,\n    effect: props.effect,\n    allowTouchMove: props.allowTouchMove === false ? false : true,\n    spaceBetween: props.spaceBetween,\n    centeredSlides: props.centeredSlides,\n    roundLengths: props.roundLengths,\n    loop: props.loop,\n    speed: props.speed ? props.speed : 400,\n    parallax: props.parallax,\n    breakpoints: breakpoints,\n    autoplay: props.autoplay ? {\n      delay: props.delay\n    } : false,\n    pagination: props.pagination !== false ? {\n      el: \".swiper-pagination.\".concat(props.paginationClass),\n      clickable: true,\n      dynamicBullets: true\n    } : false,\n    navigation: {\n      nextEl: props.navigation ? \".swiper-button-next.swiper-button-\".concat(props.navigationColor ? props.navigationColor : \"white\", \".swiper-nav.d-none.d-lg-block\") : \"\",\n      prevEl: props.navigation ? \".swiper-button-prev.swiper-button-\".concat(props.navigationColor ? props.navigationColor : \"white\", \".swiper-nav.d-none.d-lg-block\") : \"\"\n    },\n    wrapperClass: \"swiper-wrapper \".concat(props.wrapperClass ? props.wrapperClass : \"\")\n  };\n  return props.data ? __jsx(ReactIdSwiper, params, props.data.map(function (slide, index) {\n    return __jsx(\"div\", {\n      key: index,\n      className: \"\".concat(slide.itemclass ? slide.itemclass : \"\", \" \").concat(!props.columns ? \"bg-cover\" : \"\", \" \").concat(slide.bgdirection ? \"bg-cover-\".concat(slide.bgdirection) : \"\", \" \").concat(slide.darkOverlay ? \"dark-overlay\" : \"\"),\n      style: _objectSpread(_objectSpread({}, props.style), {}, {\n        backgroundImage: !props.columns ? \"url(\".concat(slide.img, \")\") : \"none\"\n      })\n    }, __jsx(Container, {\n      fluid: props.containerFluid,\n      className: \"h-100 \".concat(!props.columns ? \"px-lg-6\" : \"\", \" \").concat(props.containerclass ? props.containerclass : \"\"),\n      style: slide.containerStyle\n    }, __jsx(Row, {\n      className: \"overlay-content h-100 align-items-center \".concat(slide.rowclass ? slide.rowclass : \"\"),\n      \"data-swiper-parallax\": \"-500\"\n    }, __jsx(Col, {\n      lg: {\n        size: props.columns ? 8 : 6,\n        offset: slide.contentoffset\n      },\n      className: slide.contentclass ? slide.contentclass : \"\"\n    }, slide.subtitle && __jsx(\"p\", {\n      className: \"subtitle letter-spacing-\".concat(props.columns ? 5 : 3, \" font-weight-light \").concat(slide.subtitleclass ? slide.subtitleclass : \"\")\n    }, slide.subtitle), __jsx(\"h2\", {\n      className: slide.titleclass ? slide.titleclass : \"\",\n      style: {\n        lineHeight: \"1\"\n      }\n    }, slide.name), slide.text && __jsx(\"p\", {\n      className: \"\".concat(props.columns ? \"text-muted\" : \"lead\", \"  mb-5\")\n    }, slide.text), __jsx(Button, {\n      color: props.columns ? \"outline-dark\" : \"light\",\n      href: slide.link\n    }, slide.button)))));\n  })) : \"loading\";\n}","map":null,"metadata":{},"sourceType":"module"}